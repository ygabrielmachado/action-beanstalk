name: Deploy to Amazon Beanstalk

on:
  push:
    branches: "main"
  pull_request:
    branches: "main"

  workflow_dispatch:
    inputs:
      setRegion:
        description: 'Set region to deploy:'     
        required: true
        default: 'us-east-1' 
        type: choice
        options:
        - us-east-1
        - us-east-2
      setEnvironment:
        description: 'Set environment to deploy:'     
        required: true
        default: 'dev' 
        type: choice
        options:
        - prd
        - dev
        - stg  
      appName:
        description: 'Application name:'
        required: true
env:
  ENVIRONMENT_NAME: ${{ github.event.inputs.appName }}-${{ github.event.inputs.setEnvironment }}
  VERSION_LABEL: ${{ github.event.inputs.appName }}-${{ github.event.inputs.setEnvironment }}-${{ github.sha }}-${{github.run_number}}

jobs:

  # build:
  #   runs-on: ubuntu-latest
  #   name:  Build
    
  #   name:  Create outputs
  #   outputs:
  #     appNameOutput: ${{ steps.createVersion.outputs.usedAppName }}
  #     regionOutput: ${{ steps.createVersion.outputs.usedRegion }}
  #     branchOutput: ${{ steps.createVersion.outputs.usedBranch }}
  #   steps:
  #     if: github.event_name == 'workflow_dispatch' && github.event.inputs.appName == ''
  #   - name: Used vars
  #     id: ref
  #     run: |
  #       echo "::set-output name=usedAppName::$secrets.SET_NAME"
  #       echo "::set-output name=usedRegion::$secrets.SET_REGION"
  #       echo "::set-output name=usedBranch::${GITHUB_REF#refs/heads/}"
    
  #     if: github.event_name == 'workflow_dispatch' && github.event.inputs.appName != ''
  #   - name: Used vars
  #     run: |
  #       echo "::set-output name=usedAppName::$ ${{ github.event.inputs.appName }}"
  #       echo "::set-output name=usedRegion::${{ github.event.inputs.setRegion }}"
  #       echo "::set-output name=usedEnv::${{ github.event.inputs.setEnvironment }}"

  #   - name: Used env master
  #     if: "${{ steps.ref.outputs.usedBranch == 'master' }}"
  #     run: |
  #       echo "::set-output name=usedBranch::prd"
    
  #   - name: Used env staging
  #     if: "${{ steps.ref.outputs.usedBranch == 'staging' }}"
  #     run: |
  #       echo "::set-output name=usedBranch::stg"
    
  #   - name: Used env dev
  #     if: "${{ steps.ref.outputs.usedBranch != 'master' }}"
  #     run: |
  #       echo "::set-output name=usedBranch::dev"
       
  deploy:
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    env:
      outputAppName:  ${{needs.build.outputs.usedAppName}}
      outputRegion:   ${{needs.build.outputs.usedRegion}}
      outputEnv:   ${{needs.build.outputs.usedBranch}}

    environment: ${{ env.outputEnv }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.outputRegion }}

    - name: Build
      run: |
        cd ./app
        zip -r app.zip .

    - name: Deploy Amazon Beanstalk
      run: |
        aws s3 cp ./app/app.zip s3://$ENVIRONMENT_NAME-bucket/${{ env.outputEnv }}/$VERSION_LABEL
        aws --region ${{ env.outputRegion }} elasticbeanstalk create-application-version --application-name ${{ env.outputAppName }} --version-label $VERSION_LABEL --source-bundle S3Bucket=$ENVIRONMENT_NAME-bucket,S3Key=${{ env.outputEnv }}/$VERSION_LABEL
        aws --region ${{ env.outputRegion }} elasticbeanstalk update-environment --environment-name $ENVIRONMENT_NAME --version-label $VERSION_LABEL

    - name: Check Environment
      run: |
        aws elasticbeanstalk describe-environments --region ${{ env.outputRegion }} --application-name ${{ env.outputAppName }} --environment-names $ENVIRONMENT_NAME
